// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN           //administrador, supervisor y superior
  COORDINATOR     // Coordinadores (estos podran borrar registros, editar pero no podran crear usuario)
  ASSISTANT       //Capturistas (estos solo podran crear registros, visualizarlos y cambiar estatus)
  BUYER           //Comprador (Este rol visualizar registros sin poder modificar)
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum Store {
  RYDER9      //Ryder 9
  PLANTG      //Planta G (Futuro Proyecto)
}


// Enum for BoardingStatus (Estatus del Embarque)
enum BoardingStatus {
  PENDING_DOWNLOAD   // Pendiente de descarga
  DOWNLOADING        // En descarga
  VALIDATING         // En validación
  CAPTURING          // En captura
  COMPLETED          // Completado
}

enum CajaType {
  CAMIONETA   
  TORTON   
  MARITIMO
  CAJA_CERRADA   
  FULL 
}


// Model for Ramp (Rampa)
model Ramp {
  id          Int        @id @default(autoincrement())
  nameRamp        String     // Nombre o identificador de la rampa (por ejemplo: Rampa 1)
  isOccupied  Boolean    @default(false) // Indica si la rampa está ocupada
  boardings   Boarding[] // Relación con Boarding
}

// Model for Supplier (Proveedor)
model Supplier {
  id         Int       @id @default(autoincrement()) // ID único del proveedor
  name       String    // Nombre del proveedor
  boardings  Boarding[] // Relación con los embarques
}

// Model for Forklift Operator (Montacarguista u Operador)
model ForkliftOperator {
  id         Int       @id @default(autoincrement()) // ID único del operador
  name       String    // Nombre del operador
  boardings  Boarding[] // Relación con los embarques
}

// Model for Validator (Validador)
model Validator {
  id         Int       @id @default(autoincrement()) // ID único del validador
  name       String    // Nombre del validador
  boardings  Boarding[] // Relación con los embarques
}

// Model for Assistant (Asistente)
model Assistant {
  id         Int       @id @default(autoincrement()) // ID único del asistente
  name       String    // Nombre del asistente
  boardings  Boarding[] // Relación con los embarques
}


// Model for Boarding (Embarque)
model Boarding {
  id                  Int            @id @default(autoincrement()) // ID único del embarque
  boxNumber           String         // Número de caja
  comments            String
  arrivalDate         DateTime       // Fecha y hora de llegada
  supplier            Supplier       @relation(fields: [supplierId], references: [id]) // Relación con el proveedor
  supplierId          Int            // ID del proveedor
  boxType             CajaType       // Tipo de caja
  status              BoardingStatus @default(PENDING_DOWNLOAD) // Estatus del embarque
  ramp                Ramp?          @relation(fields: [rampId], references: [id]) // Relación con la rampa
  rampId              Int?           // ID de la rampa (opcional)
  forkliftOperator    ForkliftOperator? @relation(fields: [forkliftOperatorId], references: [id]) // Relación con el montacarguista
  forkliftOperatorId  Int?           // ID del operador (opcional)
  validator           Validator?     @relation(fields: [validatorId], references: [id]) // Relación con el validador
  validatorId         Int?           // ID del validador (opcional)
  assistant           Assistant?     @relation(fields: [assistantId], references: [id]) // Relación con el asistente
  assistantId         Int?           // ID del asistente (opcional)
  pallets             Int?
  

  // Dates for each stage
  downloadStartDate   DateTime?      // Fecha y hora de inicio de la descarga (opcional)
  downloadEndDate     DateTime?      // Fecha y hora de fin de la descarga (opcional)
  validationStartDate DateTime?      // Fecha y hora de inicio de la validación (opcional)
  validationEndDate   DateTime?      // Fecha y hora de fin de la validación (opcional)
  captureStartDate    DateTime?      // Fecha y hora de inicio de la captura (opcional)
  captureEndDate      DateTime?      // Fecha y hora de fin de la captura (opcional)
  completedDate       DateTime?      // Fecha y hora en que el embarque se marca como completado (opcional)

  // Time differences (calculated in your backend)
  timeUntilRamp        Int?           // Tiempo en minutos hasta que se asigna la rampa
  downloadDuration     Int?           // Tiempo en minutos que duró la descarga
  validationDuration   Int?           // Tiempo en minutos que duró la validación
  captureDuration      Int?           // Tiempo en minutos que duró la captura
}


model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  isVerified  Boolean  @default(false) // Para saber si el usuario ha verificado su cuenta
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @default(BUYER)
  store       Store    @default(RYDER9)
  isActive    Boolean  @default(true)
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique  // El token único generado
  userId    Int               // Relación con el usuario
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TokenType // Tipo de token: verificación, restablecimiento, etc.
  expiresAt DateTime // Fecha de expiración del token
  createdAt DateTime @default(now())
}







