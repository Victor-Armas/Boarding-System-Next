// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BoardingStatus {
  PENDING_DOWNLOAD // Pendiente de descarga
  DOWNLOADING      // En descarga
  VALIDATING       // En validación
  CAPTURING        // En captura
  COMPLETED        // Completado
}

enum Role {
  ADMIN           //administrador, supervisor y superior
  COORDINATOR     // Coordinadores (estos podran borrar registros, editar pero no podran crear usuario)
  ASSISTANT       //Capturistas (estos solo podran crear registros, visualizarlos y cambiar estatus)
  BUYER           //Comprador (Este rol visualizar registros sin poder modificar)
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum Store {
  RYDER9      //Ryder 9
  PLANTG      //Planta G (Futuro Proyecto)
}

model Box {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  boarding    Boarding[]
}

model Boarding {
  id                Int      @id @default(autoincrement())
  numberBox         String
  dateTime          DateTime    
  operator          String
  validator         String
  capturist         String
  supplier          String
  pallets           Int
  comments          String
  perforations      Boolean    @default(false)
  documentation     Boolean    @default(false)
  security          Boolean    @default(false)
  boxId             Int
  box  Box @relation(fields: [boxId], references: [id])
  status      BoardingStatus  @default(PENDING_DOWNLOAD) // Estado inicial por defecto
}



model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  isVerified  Boolean  @default(false) // Para saber si el usuario ha verificado su cuenta
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @default(BUYER)
  store       Store    @default(RYDER9)
  isActive    Boolean  @default(true)
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique  // El token único generado
  userId    Int               // Relación con el usuario
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TokenType // Tipo de token: verificación, restablecimiento, etc.
  expiresAt DateTime // Fecha de expiración del token
  createdAt DateTime @default(now())
}